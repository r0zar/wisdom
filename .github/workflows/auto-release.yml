name: Automatic Release

on:
  push:
    branches: [main]

jobs:
  auto-release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip-release')"
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.5.0
          run_install: false
          
      - name: Install json tool
        run: npm install -g json
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install
      
      - name: Auto-fix linting issues
        run: pnpm lint:fix || echo "Linting issues found, but continuing..."

      - name: Setup Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Commit linting fixes if needed
        run: |
          if git diff --quiet; then
            echo "No linting fixes needed"
          else
            git add .
            git commit -m "ðŸ¤– Auto-fix linting issues [skip-release]"
            git push
          fi
      
      - name: Bump version
        id: bump_version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Split into major, minor, patch
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          MAJOR="${version_parts[0]}"
          MINOR="${version_parts[1]}"
          PATCH="${version_parts[2]}"
          
          # Bump patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          # Update package.json with new version
          npx json -I -f package.json -e "this.version=\"$NEW_VERSION\""
          
          # Set output
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"
        
      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "ðŸ”– Bump version to ${{ steps.bump_version.outputs.new_version }} [skip-release]"
          git push
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          draft: false
          prerelease: false
          body: |
            Automatic release triggered by push to main branch.
            
            Version: ${{ steps.bump_version.outputs.new_version }}
            Commit: ${{ github.sha }}